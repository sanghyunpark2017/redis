############################################
# Note
#############################################
-마스터와 슬레이드 수동으로 추가
-마스터는 최소 3대, 과반수가 동작해야 하므로 마스터 댓수는 3대->5대->7대 등으로 scaleout이 유리
-전체 서버 동시 재가동시 직전 마스터 서버 3대 중 2대를 먼저 가동시켜야 cluster working함 (평소 관리 필요)
-"cluster nodes"는 slave/master role 표시 업데이트가 느림. 즉시 확인은 "info replication"


############################################
# OS Setting
#############################################

#SELINUX disabled
sed -i "s/SELINUX=enforcing/SELINUX=disabled/g" /etc/selinux/config
cat  /etc/selinux/config


#방화벽 disable(app ip 확정되면 정책적용 & enabe)
systemctl stop firewalld
systemctl disable firewalld


#패러미터 조정(이미 적용되었으면 PASS)
cat << EOF >> /etc/security/limits.conf
*          soft    nofile          65536
*          hard    nofile          65536
EOF


cat << EOF >> /etc/sysctl.conf
vm.overcommit_memory = 1
EOF
cat  /etc/sysctl.conf


cat << EOF >>  /etc/rc.local
sysctl -w net.core.somaxconn=65535
echo never > /sys/kernel/mm/transparent_hugepage/enabled
EOF
cat   /etc/rc.local

chmod +x /etc/rc.d/rc.local


#재부팅하여 설정반영
shutdown -r now


#tcp backlog 적용 확인
sysctl net.core.somaxconn





############################################
# PreInstall(OS)
#############################################

yum update -y
yum install wget net-tools make gcc tcl libc*-dev -y


############################################
# PreInstall(ruby)
#############################################

#Install RVM
gpg2 --keyserver hkp://keys.gnupg.net --recv-keys D39DC0E3
curl -L get.rvm.io | bash -s stable
touch /etc/profile.d/rvm.sh


#최신 stable 버전 확인하면 2018년 9월 19일 현재 2.5.1
#https://www.ruby-lang.org/en/downloads/
#>> 홈페이지 상단에 The current stable version is 2.5.1.
#위 홈페이지에서 확인한 stable version을 지정하여 다운로드&컴파일 설치(수분 소요)
/usr/local/rvm/bin/rvm install 2.5.1


#설치된 버전 확인한 후
/usr/local/rvm/bin/rvm list

#default ruby로 지정
/usr/local/rvm/bin/rvm alias create default ruby-2.5.1

#모든 ssh 터미널 종료하고 재접속
exit


#버전확인
ruby --version
>ruby 2.5.1p57 (2018-03-29 revision 63029) [x86_64-linux]

############################################
# Install Redis
#############################################
#2018년 9월 현재 stable 버전이 4.0.11 임

mkdir -p /app/redis
cd /app/redis

wget http://download.redis.io/releases/redis-stable.tar.gz
tar -xvf redis-stable.tar.gz
cd redis-stable

make test

#\o/ All tests passed without errors!        <--- 이 메세지가 나오면 OK

make install


#기본 설정파일 백업
cp /app/redis/redis-stable/redis.conf   /app/redis/redis-stable/redis.conf.org


#아직 클러스터 셋팅 전으로 워킹하는지만 테스트 후 exit
/app/redis/redis-stable/src/redis-server /app/redis/redis-stable/redis.conf
>># Server initialized
>>* Ready to accept connections

CTRL+c

############################################
# Install ruby for redis
#############################################

cd /app/redis/redis-stable
gem install redis

#그럼 아래와 같은 메시지 나오면 정상 설치된 것임 (??? 4.0.11이 아닌 4.0.2로 나옴)
>>Fetching: redis-4.0.2.gem (100%)
>>Successfully installed redis-4.0.2
>>Installing ri documentation for redis-4.0.2
>>Done installing documentation for redis after 0 seconds
>>1 gem installed


############################################
# Redis 환결설정
#############################################
#redis 데몬실행 할 떄 redis.conf 파일위치를 지정함
#이 파일의 기본 위치는 /app/redis/redis-stable 이나 별도의 디렉토리를 만든 후 기본 설정파일을 수정함
#redis.conf파일을 수정함
>>#bind 127.0.0.1 --> 주석처리
>>protected-mode no --> yes 수정
>>port 7000 --> 6379 수정
>>pidfile /var/run/redis_7000.pid --> redis_6379.pid 수정
>>logleve verbose --> notice 수정
>>logfile "/var/log/redis.log" --> ""을 수정
>>cluster-enabled yes --> 행추가
>>cluster-config-file /app/redis/redis-stable/conf/nodes-7000.conf --> 행추가
>>cluster-node-timeout 15000 --> 행추가

 
#위 수정사항을 반영하여 redis.conf 파일을 만듬 (현재는 모든 서버가 공통의 설정임)

mkdir -p /app/redis/redis-stable/conf
cd /app/redis/redis-stable/conf

---------------------------------------------------------
cat << EOF > /app/redis/redis-stable/conf/redis.conf
#bind 127.0.0.1
protected-mode no
port 7000
tcp-backlog 511
timeout 0
tcp-keepalive 300
daemonize no
supervised no
pidfile /var/run/redis_7000.pid
#loglevel verbose
#logfile ""
loglevel verbose
logfile "/var/log/redis.log"
databases 16
always-show-logo yes
save 900 1
save 300 10
save 60 10000
stop-writes-on-bgsave-error yes
rdbcompression yes
rdbchecksum yes
dbfilename dump.rdb
dir ./
slave-serve-stale-data yes
slave-read-only yes
repl-diskless-sync no
repl-diskless-sync-delay 5
repl-disable-tcp-nodelay no
slave-priority 100
lazyfree-lazy-eviction no
lazyfree-lazy-expire no
lazyfree-lazy-server-del no
slave-lazy-flush no
appendonly no
appendfilename "appendonly.aof"
appendfsync everysec
no-appendfsync-on-rewrite no
auto-aof-rewrite-percentage 100
auto-aof-rewrite-min-size 64mb
aof-load-truncated yes
aof-use-rdb-preamble no
lua-time-limit 5000
slowlog-log-slower-than 10000
slowlog-max-len 128
latency-monitor-threshold 0
notify-keyspace-events ""
hash-max-ziplist-entries 512
hash-max-ziplist-value 64
list-max-ziplist-size -2
list-compress-depth 0
set-max-intset-entries 512
zset-max-ziplist-entries 128
zset-max-ziplist-value 64
hll-sparse-max-bytes 3000
activerehashing yes
client-output-buffer-limit normal 0 0 0
client-output-buffer-limit slave 256mb 64mb 60
client-output-buffer-limit pubsub 32mb 8mb 60
hz 10
aof-rewrite-incremental-fsync yes
cluster-enabled yes
cluster-config-file /app/redis/redis-stable/conf/nodes-7000.conf
cluster-node-timeout 15000
cluster-require-full-coverage no
cluster-slave-validity-factor 0
EOF
ll

------------------------------------------------------------------------------------------------------------------


############################################
# Redis 시작/종료 alias 생성
#############################################

------------------------------------------------------------------------------------------------------------------
cat << EOF >> /root/.bash_profile
# Redis port 7000
alias rstart='redis-server /app/redis/redis-stable/conf/redis.conf &'
alias rstop='redis-cli -p 7000 shutdown'
alias rconsole='redis-cli -c -p 7000'
alias rlconsole='redis-cli -p 7000'
EOF

------------------------------------------------------------------------------------------------------------------


############################################
# Redis Default 구동 점검
#############################################
#모든 서버에서 alias "rstart"로 실행해 봄
rstart

#지금까지 진행 과정 중 정상인지 체크
rconsole
cluster info  -> redis 콘솔 내 입력
exit


>>No cluster configuration found,  --> 클러스터 생성 전이므로 메시지 내용은 정상
>>I'm ******************  --> rconsole 후  cluster info로도 확인
>>Redis 4.0.11
>>Port: 7000

#프로세스 구동 확인
#loopback이 아닌 all ip로 리슨하는지 확인
#nodes-7000.conf 파일이 생성 --> 이 내용은 rconsole 후  cluster info의 결과와 동일함
clear
ps -ef | grep redis
netstat -nlp | grep redis
ll /app/redis/redis-stable/conf


############################################
# Redis 클러스터 생성(Master먼저)
#############################################
#클러스터 생성 명령 redis-trib.rb는 아무 서버에서 수행해도 됨
#레디스 클러스터는 16384 개의 Hash Slot을 가지는데 MASTER 서버 갯수 만큼 1/N 해서 나눠 가짐
#클러스터가 생성되면 각각의 클러스터 노드끼리의 통신을 위한 포트들이 하나씩 더 생기게 되는데, 기본으로 설정된 port + 10000으로 생성
#방화벽 포트 오픈은 TCP 7000, TCP 17000 해야함

#6대 구성 계획
10.10.64.51 master1
10.10.64.52 master2
10.10.64.53 master3
10.10.64.54 slave1
10.10.64.55 slave2
10.10.64.56 slave3

#redis-trib.rb로 클러스터 생성
/app/redis/redis-stable/src/redis-trib.rb create 10.10.64.51:7000 10.10.64.52:7000 10.10.64.53:7000



============================ 정상적인 설치 화면 ==================================================================
>>> Creating cluster
>>> Performing hash slots allocation on 3 nodes...
Using 3 masters:
10.10.64.51:7000
10.10.64.52:7000
10.10.64.53:7000
M: 296ec7164d32b805bfdb1604ce5e89a4e6145a10 10.10.64.51:7000
   slots:0-5460 (5461 slots) master
M: 2542bbfa9fecbb6e5c48b7787a6a7659617c5a9c 10.10.64.52:7000
   slots:5461-10922 (5462 slots) master
M: 0295538b041c07adf2a2e0d1f87ebe56d74900c6 10.10.64.53:7000
   slots:10923-16383 (5461 slots) master
Can I set the above configuration? (type 'yes' to accept): yes --> yes 입력

>>> Nodes configuration updated
>>> Assign a different config epoch to each node
>>> Sending CLUSTER MEET messages to join the cluster
Waiting for the cluster to join..
>>> Performing Cluster Check (using node 10.10.64.51:7000)
M: 296ec7164d32b805bfdb1604ce5e89a4e6145a10 10.10.64.51:7000
   slots:0-5460 (5461 slots) master
   0 additional replica(s)             --> 아직 slave는 없음(정상)
M: 2542bbfa9fecbb6e5c48b7787a6a7659617c5a9c 10.10.64.52:7000
   slots:5461-10922 (5462 slots) master
   0 additional replica(s)             --> 아직 slave는 없음(정상)
M: 0295538b041c07adf2a2e0d1f87ebe56d74900c6 10.10.64.53:7000
   slots:10923-16383 (5461 slots) master
   0 additional replica(s)             --> 아직 slave는 없음(정상)
[OK] All nodes agree about slots configuration.
>>> Check for open slots...
>>> Check slots coverage...
[OK] All 16384 slots covered.
=================================================================================================================



#클러스터생성확인1
clear
cat /app/redis/redis-stable/conf/nodes-7000.conf

#클러스터생성확인2
rconsole
cluster nodes
exit

#둘다 같은 내용인 것으로 master 3대(id, 슬롯범위) 그리고 상태(connected) 확인 되면 OK
=================================================================================================================
2542bbfa9fecbb6e5c48b7787a6a7659617c5a9c 10.10.64.52:7000@17000 master - 0 1537320724515 2 connected 5461-10922
296ec7164d32b805bfdb1604ce5e89a4e6145a10 10.10.64.51:7000@17000 myself,master - 0 0 1 connected 0-5460
0295538b041c07adf2a2e0d1f87ebe56d74900c6 10.10.64.53:7000@17000 master - 0 1537320724222 3 connected 10923-16383
vars currentEpoch 3 lastVoteEpoch 0
=================================================================================================================

#클러스터생성확인3(TCP 7000 그리고 TCP 17000)
netstat -nlp  | grep 7000


############################################
# Redis Slave 지정
#############################################
#slave는 1개 씩 추가 하며 명령어에 mster와 묶일 slave IP를 같이 지정하기 때문에 아무 서버에서 실행해도 된다
#명령어 뒷 부분의 IP주소 2개는 slave:port  mster:port의 순서임

#master1(10.10.64.51)에 slave로 10.10.64.54를 지정하고자 하며,
#아래 명령어에 master-id는 mater1의 ID임
/app/redis/redis-stable/src/redis-trib.rb add-node --slave --master-id 296ec7164d32b805bfdb1604ce5e89a4e6145a10 10.10.64.54:7000 10.10.64.51:7000

=================================================================================================================
>>> Adding node 10.10.64.54:7000 to cluster 10.10.64.51:7000
>>> Performing Cluster Check (using node 10.10.64.51:7000)     --> 현재 클러스터 상태를 check한 것으로 master3대 모두 slave 숫자는 0
M: 296ec7164d32b805bfdb1604ce5e89a4e6145a10 10.10.64.51:7000
   slots:0-5460 (5461 slots) master
   0 additional replica(s)                                     --> 순차적으로 add 하는 과정에서 지정된 master는 0이 1로 변경될 것임
M: 2542bbfa9fecbb6e5c48b7787a6a7659617c5a9c 10.10.64.52:7000
   slots:5461-10922 (5462 slots) master
   0 additional replica(s)
M: 0295538b041c07adf2a2e0d1f87ebe56d74900c6 10.10.64.53:7000
   slots:10923-16383 (5461 slots) master
   0 additional replica(s)
[OK] All nodes agree about slots configuration.
>>> Check for open slots...
>>> Check slots coverage...
[OK] All 16384 slots covered.
>>> Send CLUSTER MEET to node 10.10.64.54:7000 to make it join the cluster.
Waiting for the cluster to join.
>>> Configure node as replica of 10.10.64.51:7000.
[OK] New node added correctly.                                   --> slave add 정상처리
=================================================================================================================



#이런식으로 해서 나머지 2개의 master에 대한 slave도 순차적으로 실행함
/app/redis/redis-stable/src/redis-trib.rb add-node --slave --master-id 2542bbfa9fecbb6e5c48b7787a6a7659617c5a9c 10.10.64.55:7000 10.10.64.52:7000

/app/redis/redis-stable/src/redis-trib.rb add-node --slave --master-id 0295538b041c07adf2a2e0d1f87ebe56d74900c6 10.10.64.56:7000 10.10.64.53:7000


#모두 추가 후 master 3, slave 3 확인
[root@t1vcoredisdev02 ~]# rconsole
127.0.0.1:7000> cluster nodes
0295538b041c07adf2a2e0d1f87ebe56d74900c6 10.10.64.53:7000@17000 master - 0 1537322099000 3 connected 10923-16383
982b1e830dcedf8a10a6abb8cda22b50052b8492 10.10.64.56:7000@17000 slave 0295538b041c07adf2a2e0d1f87ebe56d74900c6 0 1537322097000 3 connected
296ec7164d32b805bfdb1604ce5e89a4e6145a10 10.10.64.51:7000@17000 master - 0 1537322095000 1 connected 0-5460
36214e945b24b89d590d8531c84757278fd2ba8f 10.10.64.54:7000@17000 slave 296ec7164d32b805bfdb1604ce5e89a4e6145a10 0 1537322099936 1 connected
c16e82242967966af117059586457eed8e31e3d6 10.10.64.55:7000@17000 slave 2542bbfa9fecbb6e5c48b7787a6a7659617c5a9c 0 1537322098000 2 connected
2542bbfa9fecbb6e5c48b7787a6a7659617c5a9c 10.10.64.52:7000@17000 myself,master - 0 1537322098000 2 connected 5461-10922


############################################
# Redis 데이터분배 테스트
#############################################
#모든 서버 stop
rstop

#master 1번 서버는 창을 2개 열고 각각 실행
tail -f /var/log/redis.log

rconsole
info keyspace

#모든 서버 start
rstart


1. key/value 테스트 데이터(1,048,576개, 28GB) 다운로드
cd /root
wget http://10.10.63.63:8089/redis-input-test.txt.bin
wc -l /root/redis-input-test.txt.bin

2. 1백만개 밀어 넣기 (약 25초 소요)
cat /root/redis-input-test.txt.bin | redis-cli -p 7000 >> /root/redis-input.out  

!!! 349473에서 멈춤


3.확인해 보면 다른 마스터 서버로도 생성되는 것을 알 수 있음
more  /root/redis-input.out  

=================================================================================
MOVED 9189 10.10.64.52:7000

OK
OK
MOVED 13120 10.10.64.53:7000  --> 다른 마스터서버에 생성됨을 알 수 있음

MOVED 9057 10.10.64.52:7000

OK
OK
MOVED 13004 10.10.64.53:7000

MOVED 8941 10.10.64.52:7000

MOVED 5850 10.10.64.52:7000
...
..
=================================================================================

4.마스터 3대 각각 "info keyspace"를 확인해 보니 1번 master만 저장되어 있음
>> 명령어를 실행한 1번 마스터만 349,473 개에 멈춘 것을 알 수 있음
>> 이는 명령어 중 "redis-cli -p 7000" 클러스터를 가리키는 "-c"가 누락되어 발생한 것임

5.1번 마스터에 모든 키를 지우고
rlconsole
flushall
info keyspace

6.클러스터에 "-c"에 넣음
cat /root/redis-input-test.txt.bin | redis-cli -c -p 7000 >> /root/redis-input.out  

7.마스터 3대에 골고루 들어갔음
#1,048,575개 넣어서 master 3대 합 1,048,576이 나옴
#slave도 쌍이 되는 master 서버와 동일한 숫자가 나옴
master1 : 349473
master2 : 349632
master3 : 349471
=> 1,048,576

8.마스터 1번에서 검색하고
keys *999999
>1) "key999999"
>2) "key1999999"
>(이하 생략)

9.마스터 1번이 가지고 있지 않은 키를 검색하면 그 키를 가지고 있는 마스터에서 가져옴
get key999998
-> Redirected to slot [6453] located at 10.10.64.52:7000
"value999998"

-- 테스트 끝 --

10.마스터서버 3대 모두 flush, slave 서버는 쓰기 권한 없어서 실패
flushall


############################################
# Redis FailOver 테스트
#############################################

#현재 클러스터 노드 상태 (클러스터 모드이므로 아무 서버나 동일 결과)
echo "cluster nodes" | redis-cli -c -p 7000

#시나리오1. role 전환 테스트 (master1과 slave1)
-master1 서비스를 중지하면 이 서버와 매핑된 slave1서버가 slave -> master
-master1 서비스를 살리면 slave1은  master 상태 유지하고, master1이 master(직전상태) -> slave 상태로 올라옴
-slave1을 중지하면 master1이 slave -> master로 바뀜
-slave1을 살리면 master1은 여전히 master이고, slave1은 master(직전상태) -> slave 상태로 올라옴
-echo "cluster nodes" | redis-cli -c -p 7000 해서 master 3ea, slave 3ea 정상확인

#시나리오2. role 전환 테스트 + insert (master1과 slave1)

1. master 1번 셧다운 상태를 가정하여 서비스 중지
rstop

2. 아무 서버에서 클러스터 노드 상태 확인해 보면 slave 였던 서버가 master가 되었음
rconsole
cluster nodes
>> master 1번은 "master, fail", slave 1번은 "slave -> master"로 변경됨 

3. master였던 서버가 장애 나도 제대로 동작하는 지 확인하기 위해
이제 막 master가 된 slave 1번 서버에 들어가서 새로운 key insert
set key1 value1
set key2 value2
set key3 value3
set key4 value4
set key5 value5
set key6 value6
set key7 value7
set key8 value8
set key9 value9
>> 마스터 3개의 서버에 랜덤하게 균등 wirte 하게 됨 이 때 방금 master로 승격된 slave 1번의 IP주소가 보이면 OK

#master/slave role과 설정 확인
info replication


4. master 1번 서비스를 실행하면 master(직전상태)에서 slave로 동작하고 있으며,
클러스터 콘솔(처음 실행 때는 자기 자긴 바라봄)에서 크기를 보면 새로운 master에서 복재 받았음을 알 수 있음
rconsole
info keyspace

5. 이제 slave가 된 이 서버에서 조회 하게 되면, master 서버로 redirect 되는 것을 확인 할 수 있고,
이후 명령어들은 master에서 수행되어 진다. -> 프롬프트가 master IP로 변경됨
rconsole    --> 처음 실행 때는 자기 자신을 바라보면서 실행됨
get key2

6.원복은 slave1을 셧다운하고, 다시 올리면 master/slave 가 상호 스위치 된다.


############################################
# Redis Cluser에 master 노드 ADD
#############################################

#신규 redis 2대(master1대, slave1대)는 "Redis Default 구동 점검" 단계까지 설치 한다.

#아무 마스터 서버에서 클러스터 추가함
#명령어 : redis-trib.rb add-node 추가할서버:포트 기존클러스터서버:포트

/app/redis/redis-stable/src/redis-trib.rb add-node 10.10.xx.xx:7000 10.10.64.51:7000

#슬롯 재분배
/root/redis-stable/src/redis-trib.rb reshard 10.10.xx.xx:7000
>>How many slots do you want to move (from 1 to 16384)? 4096 --> 전체 Hash Slot이 16,384을 4로 나눠서 4096 입력
>>What is the receiving node ID? *************   --> 막 추가한 서버의 ID입력
>>Source node #1:all   --> 4996개를 기존 모든 마스터에서 균등하게 가져올 것이므로 all 입력

#이제 막 추가한 master 서버에  slave 지정
>>master-id는 방금 추가한 서버의 ID
>>명령어 뒷 부분의 IP주소 2개는 slave:port  master:port의 순서임
/app/redis/redis-stable/src/redis-trib.rb add-node --slave --master-id ********* 10.10.xx.xx:7000 10.10.xx.xx:7000


############################################
# Redis Cluser에 master 노드 Delete
############################################
#명령어 : redis-trib.rb del-node [ANY MASTER IP:포트 삭제할서버-ID
/app/redis/redis-stable/src/redis-trib.rb del-node 10.10.64.51:7000 ***********************

#삭제할 서버는 slot이 없어야 함으로 샤딩명령어 사용해서 다른 서버로 slot move한다
#샤딩명령어는 source, destination, 서버ID 3가지만 알면 클러스터 내 서버간 슬롯 moving

참고. URL http://bstar36.tistory.com/361



############################################
# Redis 로그
############################################
#verbose(현재), notice 


### flush sh 
cd /root
mkdir cronjobs
cd /root/cronjobs
cat << EOF > /root/cronjobs/flush_redis_log.sh
#!/bin/sh
echo > /var/log/redis.log
EOF
chmod 755 /root/cronjobs/flush_redis_log.sh
ll




crontab -e

내용추가

###flush redis log
0 0 * * * /root/cronjobs/flush_redis_log.sh









